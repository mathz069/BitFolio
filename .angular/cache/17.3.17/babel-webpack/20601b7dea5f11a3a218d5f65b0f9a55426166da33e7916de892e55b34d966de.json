{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.baseAPIUrl + '/auth';\n    }\n    registerUsuario(data) {\n      debugger;\n      const formData = new FormData();\n      const candidato = data;\n      formData.append('nome', candidato.nome);\n      formData.append('email', candidato.email);\n      formData.append('senha', candidato.senha);\n      formData.append('dataNascimento', candidato.dataNascimento);\n      formData.append('telefone', candidato.telefone);\n      if (candidato.curriculoPdf) {\n        formData.append('curriculoPdf', candidato.curriculoPdf, candidato.curriculoPdf.name);\n        formData.forEach((value, key) => {\n          console.log(`${key}: ${value}`);\n        });\n        return this.http.post(`${this.apiUrl}/register/candidato`, formData);\n      }\n    }\n    registerFuncionario(data) {\n      return this.http.post(`${this.apiUrl}/register/funcionario`, data);\n    }\n    registerAdmin(data) {\n      return this.http.post(`${this.apiUrl}/register/admin`, data);\n    }\n    login(dto) {\n      return this.http.post(`${this.apiUrl}/login`, dto).pipe(tap(response => {\n        localStorage.setItem('token', response.token);\n      }));\n    }\n    solicitarRecuperacaoSenha(email) {\n      return this.http.post(`${this.apiUrl}/recuperar-senha`, JSON.stringify(email), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    redefinirSenha(dto) {\n      return this.http.post(`${this.apiUrl}/redefinir-senha`, dto);\n    }\n    obterToken() {\n      return localStorage.getItem('token');\n    }\n    obterUsuarioId() {\n      const token = this.obterToken();\n      if (!token) return null;\n      try {\n        const payload = jwt_decode(token);\n        return parseInt(payload.nameid);\n      } catch (e) {\n        console.error('Erro ao decodificar o token:', e);\n        return null;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}