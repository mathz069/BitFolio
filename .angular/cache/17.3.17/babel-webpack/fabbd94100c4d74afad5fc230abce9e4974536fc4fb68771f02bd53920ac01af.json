{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { EmpresaModalComponent } from '../modal/empresa-modal/empresa-modal.component';\nlet RegisterFuncComponent = class RegisterFuncComponent {\n  constructor(fb, authService, empresaService, router, dialog) {\n    this.fb = fb;\n    this.authService = authService;\n    this.empresaService = empresaService;\n    this.router = router;\n    this.dialog = dialog;\n    this.step = 1;\n    this.passwordField = 'password';\n    this.confirmPasswordField = 'password';\n    this.eyeSourcePassword = './assets/images/invisibility.svg';\n    this.eyeSourceConfirmPassword = './assets/images/invisibility.svg';\n    this.errorMessage = '';\n    this.isSubmitting = false;\n    this.empresas = [];\n    this.loadingEmpresas = false;\n  }\n  ngOnInit() {\n    this.loadEmpresas();\n    this.form = this.fb.group({\n      nome: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      senha: ['', [Validators.required, this.passwordStrengthValidator]],\n      confirmarSenha: ['', Validators.required],\n      dataNascimento: ['', [Validators.required, this.ageValidator]],\n      telefone: ['', Validators.required],\n      cargo: ['', Validators.required],\n      dtAdmissao: ['', Validators.required],\n      negocioId: [null, Validators.required]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n  loadEmpresas() {\n    this.loadingEmpresas = true;\n    this.empresaService.getEmpresas().subscribe({\n      next: data => {\n        this.empresas = data.map(e => ({\n          id: Number(e.id),\n          nome: e.nome\n        }));\n        this.loadingEmpresas = false;\n      },\n      error: () => {\n        this.empresas = [];\n        this.loadingEmpresas = false;\n      }\n    });\n  }\n  setBorder(controlName) {\n    const control = this.form.get(controlName);\n    return control && control.invalid && control.touched ? '1px solid red' : '1px solid #ccc';\n  }\n  nextStep() {\n    const nome = this.form.get('nome');\n    const email = this.form.get('email');\n    const senha = this.form.get('senha');\n    const confirmarSenha = this.form.get('confirmarSenha');\n    if (nome && nome.valid && email && email.valid && senha && senha.valid && confirmarSenha && confirmarSenha.valid && senha.value === confirmarSenha.value) {\n      this.step = 2;\n    } else {\n      alert('Preencha corretamente os campos da primeira etapa.');\n    }\n  }\n  previousStep() {\n    this.step = 1;\n  }\n  openEmpresaModal() {\n    const dialogRef = this.dialog.open(EmpresaModalComponent, {\n      width: '600px',\n      disableClose: true\n    });\n    dialogRef.componentInstance.empresaCriada.subscribe(novaEmpresa => {\n      this.empresas.push(novaEmpresa);\n      this.form.get('negocioId').setValue(novaEmpresa.id);\n      dialogRef.close();\n    });\n    dialogRef.componentInstance.closeModal.subscribe(() => {\n      dialogRef.close();\n    });\n  }\n  customSearchFn(term, item) {\n    term = term.toLowerCase();\n    return item.nome.toLowerCase().includes(term);\n  }\n  onEmpresaSelecionada(event) {\n    const id = typeof event === 'object' ? event.id : event;\n    console.log('ID selecionado:', id);\n    this.form.get('negocioId').setValue(id);\n  }\n  onLimparEmpresa() {\n    this.form.get('negocioId').setValue(null);\n  }\n  changeFieldType(event, field) {\n    event.preventDefault();\n    if (field === 'password') {\n      this.passwordField = this.passwordField === 'text' ? 'password' : 'text';\n      this.eyeSourcePassword = this.passwordField === 'text' ? './assets/images/visibility.svg' : './assets/images/invisibility.svg';\n    } else {\n      this.confirmPasswordField = this.confirmPasswordField === 'text' ? 'password' : 'text';\n      this.eyeSourceConfirmPassword = this.confirmPasswordField === 'text' ? './assets/images/visibility.svg' : './assets/images/invisibility.svg';\n    }\n  }\n  passwordStrengthValidator(control) {\n    const password = control.value;\n    const isValid = password.length >= 8 && /[A-Z]/.test(password) && /[a-z]/.test(password) && /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    return isValid ? null : {\n      passwordStrength: true\n    };\n  }\n  passwordMatchValidator(group) {\n    const senha = group.get('senha').value;\n    const confirmarSenha = group.get('confirmarSenha').value;\n    return senha === confirmarSenha ? null : {\n      passwordMismatch: true\n    };\n  }\n  ageValidator(control) {\n    const birthDate = new Date(control.value);\n    const today = new Date();\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const month = today.getMonth() - birthDate.getMonth();\n    if (month < 0 || month === 0 && today.getDate() < birthDate.getDate()) age--;\n    return age < 18 ? {\n      ageInvalid: true\n    } : null;\n  }\n  transformNome(nome) {\n    return nome.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n  }\n  transformEmail(email) {\n    return email.toLowerCase();\n  }\n  onSubmit() {\n    if (this.form.invalid) {\n      this.errorMessage = 'Preencha todos os campos obrigatórios.';\n      return;\n    }\n    this.isSubmitting = true;\n    const formValues = this.form.value;\n    const funcionario = {\n      nome: this.transformNome(formValues.nome),\n      email: this.transformEmail(formValues.email),\n      senha: formValues.senha,\n      dataNascimento: formValues.dataNascimento,\n      telefone: formValues.telefone,\n      cargo: formValues.cargo,\n      dtAdmissao: formValues.dtAdmissao,\n      negocioId: formValues.negocioId\n    };\n    this.authService.registerFuncionario(funcionario).subscribe({\n      next: res => {\n        alert('Funcionário cadastrado com sucesso!');\n        this.form.reset();\n        this.isSubmitting = false;\n        this.router.navigate(['/login']);\n      },\n      error: err => {\n        console.error('Erro ao registrar funcionário:', err);\n        this.errorMessage = 'Erro ao registrar. Verifique os dados.';\n        this.isSubmitting = false;\n      }\n    });\n  }\n};\nRegisterFuncComponent = __decorate([Component({\n  selector: 'app-register-func',\n  templateUrl: './register-func.component.html',\n  styleUrls: ['./register-func.component.css']\n})], RegisterFuncComponent);\nexport { RegisterFuncComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}